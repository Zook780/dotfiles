#+TITLE: Zook's Emacs Config
#+AUTHOR: Zook780
#+DESCRIPTION: My minimal ? GNU Emacs config

* Melpa
** This enables to install many more packages
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+end_src
 
* use-package install
** Its easy to use :D
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

* Number line mode
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src

* Which key
#+begin_src emacs-lisp
  (use-package which-key
	       :ensure t
	       :init
	       (setq which-key-side-window-location 'bottom
		     which-key-sort-order #'which-key-key-order-alpha
		     which-key-sort-uppercase-first nil
		     which-key-add-column-padding 1
		     which-key-max-display-columns nil
		     which-key-min-display-lines 6
		     which-key-side-window-slot -10
		     which-key-side-window-max-height 0.25
		     which-key-idle-delay 0.8
		     which-key-max-description-length 25
		     which-key-allow-imprecise-window-fit t
		     which-key-separator " ï…¸ " ))
  (which-key-mode)
#+end_src

* Theme(s)
#+begin_src emacs-lisp
  (use-package ewal-spacemacs-themes
	       :if window-system
	       :ensure t
	       :init
	       (load-theme 'ewal-spacemacs-modern t)
	       ;; Disabling toolbar/menubar/scrollbar
	       (menu-bar-mode -1)
	       (tool-bar-mode -1)
	       (scroll-bar-mode -1)
	       (electric-pair-mode 1)
	       (window-divider-mode 1))
#+end_src

* Ewal
#+begin_src emacs-lisp
  (use-package ewal
	       :init (setq ewal-use-built-in-always-p nil
			   ewal-use-built-in-on-failure-p t
			   ewal-built-in-palette "sexy-material"))
#+end_src

* All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons
	       :ensure t)
  ;; run all-the-icons-install-fonts after installation
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
	       :ensure t
	       :config
	       (dashboard-setup-startup-hook)
	       (setq dashboard-set-file-icons t)
	       (setq dashboard-set-heading-icons t)
	       (setq dashboard-startup-banner "~/.emacs.d/avatar.png")
	       (setq dashboard-banner-logo-title "I like to code"))
#+end_src

* Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
	       :ensure t)
  (doom-modeline-mode 1)
#+end_src

* Custom Font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
	       '(font . "JetBrains Mono-11"))
#+end_src

* Prettify symbols mode
#+begin_src emacs-lisp
  (use-package pretty-symbols
	       :ensure t)
  (global-prettify-symbols-mode)
#+end_src

* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
	       :ensure t
	       :config
	       (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
	       (yas-global-mode 1))
#+end_src

* Org mode bullets
#+begin_src emacs-lisp
  (use-package org-bullets
	       :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* Autocompletion
** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
	       :ensure t
	       :init
	       ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
	       (setq lsp-keymap-prefix "C-c l")
	       :hook (
		      (c++-mode . lsp)
		      (c-mode . lsp)
		      (python-mode . lsp)
		      ;; use sudo pip install python-lsp-server python-language-server
		      (html-mode . lsp)
		      ;; for html npm install -g vscode-html-languageserver-bin and install html-ls I guess from lsp-install-server
		      (css-mode . lsp)
		      ;;for css npm install -g vscode-css-languageserver-bin and install css-ls from lsp-install-server
		      (dart-mode . lsp)
		      ;; if you want which-key integration
		      (lsp-mode . lsp-enable-which-key-integration))
	       :commands lsp)

  ;; optionally
  (use-package lsp-ui :ensure t :commands lsp-ui-mode)

#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
	       :ensure t
	       :init
	       (global-flycheck-mode t))   
#+end_src

** company-mode (for completions)
#+begin_src emacs-lisp
  (use-package company
	       :ensure t)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

* Magit
** Git controls (staging, commiting. etc)
#+begin_src emacs-lisp
  (use-package magit
	       :ensure t
	       :config
	       (setq magit-push-always-verify nil)
	       (setq git-commit-summary-max-length 50)
	       :bind
	       ("C-x C-g" . magit-status))
#+end_src

* Beacon
** Beacon (make the cursor shine when scrolling)
#+begin_src emacs-lisp
  (use-package beacon
	       :ensure t
	       :config
	       (beacon-mode 1))
#+end_src

* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
	       :ensure t
	       :config
	       (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
	       (yas-global-mode 1))
#+end_src

* Emojify
#+begin_src emacs-lisp
  (use-package emojify
	       :ensure t)
  (global-emojify-mode)
#+end_src

* Disabling dialog-box
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
  (setq use-file-dialog nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (global-subword-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
